import shutil
import pyfiglet
import os
from InquirerPy import inquirer
import requests

# ? Can this stay here?
url_api = "http://127.0.0.1:8000"


# Menu style functions
def center_menu_options(text):
    total_width = shutil.get_terminal_size().columns - 10
    text_length = len(text)
    total_spaces = total_width - text_length - 2
    left_spaces = total_spaces // 2
    right_spaces = total_spaces - left_spaces
    return f"--<{' ' * left_spaces}{text}{' ' * right_spaces}>--"


def center_figlet_text(figlet_text):
    lines = figlet_text.split("\n")
    terminal_width = os.get_terminal_size().columns
    centered_lines = [
        line.center(terminal_width) for line in lines if line.strip() != ""
    ]
    return "\n".join(centered_lines)


# Create a new task
def create_task(name, description, status="pending"):
    url = f"{url_api}/tasks/"
    task_data = {
        "id": 69420,  # ID is not necessary, it will be generated by the API
        "name": name,
        "description": description,
        "status": status,  # Default status is "pending", can only be changed by updating the task
    }
    response = requests.post(url, json=task_data)
    if response.status_code == 200:
        print("Task created:", response.json())
    else:
        print("Failed to create task:", response.status_code, response.text)


# Get all tasks
def get_all_tasks():
    url = f"{url_api}/tasks/"
    response = requests.get(url)
    if response.status_code == 200:
        for task in response.json():
            print(task, end="\n")
    else:
        print("Failed to fetch tasks:", response.status_code, response.text)


# Get a specific task by ID
def get_task_by_id(task_id):
    url = f"{url_api}/tasks/{task_id}"
    response = requests.get(url)
    if response.status_code == 200:
        print(f"Task {task_id}:", response.json())
    else:
        print(f"Task {task_id} not found:", response.status_code, response.text)


# Update a task
def update_task(task_id, task):
    url = f"{url_api}/tasks/{task_id}"
    response = requests.put(url, json=task)
    if response.status_code == 200:
        print(f"Task {task_id} updated:", response.json())
    else:
        print(f"Failed to update task {task_id}:", response.status_code, response.text)


# Delete a task
def delete_task(task_id):
    url = f"{url_api}/tasks/{task_id}"
    response = requests.delete(url)
    if response.status_code == 200:
        print(f"Task {task_id} deleted.")
    else:
        print(f"Failed to delete task {task_id}:", response.status_code, response.text)


def menu():
    header = pyfiglet.figlet_format("To-Do List")
    centered_header = center_figlet_text(header)
    print("\n" + centered_header + "\n")

    options = [
        "Create a task",
        "Get all tasks",
        "Get a task by ID",
        "Update a task",
        "Delete a task",
        "Exit",
    ]

    centered_options = [center_menu_options(option) for option in options]

    choice = inquirer.select(
        message="Choose an option:",
        choices=centered_options,
        default=centered_options[0],
        wrap_lines=False,
        border=True,
        pointer="$",
    ).execute()

    if "Create" in choice:
        name = input("Task name: ")
        description = input("Task description: ")
        create_task(name, description)

    elif "Get all" in choice:
        get_all_tasks()

    elif "Get a task" in choice:
        task_id = int(input("Task ID: "))
        get_task_by_id(task_id)

    elif "Update" in choice:
        task_id = int(input("Task ID: "))
        name = input("Task name: ")
        description = input("Task description: ")
        status = input("Task status (pending, in_progress, completed): ")
        task = {
            "id": task_id,
            "name": name,
            "description": description,
            "status": status,
        }
        update_task(task_id, task)

    elif "Delete" in choice:
        task_id = int(input("Task ID: "))
        delete_task(task_id)

    elif "Exit" in choice:
        print("At√© mais!")
        exit()


if __name__ == "__main__":
    while True:
        menu()
